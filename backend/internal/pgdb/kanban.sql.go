// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: kanban.sql

package pgdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO kanban(
    title,
    column_type,
    owner_id ) 
VALUES ( $1, $2, $3) RETURNING
id,
title,
column_type
`

type CreateTaskParams struct {
	Title      string      `json:"title"`
	ColumnType string      `json:"column_type"`
	OwnerID    pgtype.Int4 `json:"owner_id"`
}

type CreateTaskRow struct {
	ID         int32  `json:"id"`
	Title      string `json:"title"`
	ColumnType string `json:"column_type"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (CreateTaskRow, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Title, arg.ColumnType, arg.OwnerID)
	var i CreateTaskRow
	err := row.Scan(&i.ID, &i.Title, &i.ColumnType)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM kanban
WHERE
id = $1
AND owner_id = $2
`

type DeleteTaskParams struct {
	ID      int32       `json:"id"`
	OwnerID pgtype.Int4 `json:"owner_id"`
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.Exec(ctx, deleteTask, arg.ID, arg.OwnerID)
	return err
}

const getBoard = `-- name: GetBoard :many
SELECT
id,
title,
column_type
FROM
kanban
WHERE
owner_id = $1
`

type GetBoardRow struct {
	ID         int32  `json:"id"`
	Title      string `json:"title"`
	ColumnType string `json:"column_type"`
}

func (q *Queries) GetBoard(ctx context.Context, ownerID pgtype.Int4) ([]GetBoardRow, error) {
	rows, err := q.db.Query(ctx, getBoard, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBoardRow
	for rows.Next() {
		var i GetBoardRow
		if err := rows.Scan(&i.ID, &i.Title, &i.ColumnType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE kanban
SET title = $1,
column_type = $2,
updated_at = NOW()
WHERE
id = $3
AND owner_id = $4
`

type UpdateTaskParams struct {
	Title      string      `json:"title"`
	ColumnType string      `json:"column_type"`
	ID         int32       `json:"id"`
	OwnerID    pgtype.Int4 `json:"owner_id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.Title,
		arg.ColumnType,
		arg.ID,
		arg.OwnerID,
	)
	return err
}
