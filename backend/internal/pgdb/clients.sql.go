// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: clients.sql

package pgdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients
    (name, email, phone, is_bussiness, address, total_purchases)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING id,
name,
email,
phone,
is_bussiness,
total_purchases,
address
`

type CreateClientParams struct {
	Name           string      `json:"name"`
	Email          pgtype.Text `json:"email"`
	Phone          pgtype.Text `json:"phone"`
	IsBussiness    pgtype.Bool `json:"is_bussiness"`
	Address        pgtype.Text `json:"address"`
	TotalPurchases pgtype.Int4 `json:"total_purchases"`
}

type CreateClientRow struct {
	ID             pgtype.UUID `json:"id"`
	Name           string      `json:"name"`
	Email          pgtype.Text `json:"email"`
	Phone          pgtype.Text `json:"phone"`
	IsBussiness    pgtype.Bool `json:"is_bussiness"`
	TotalPurchases pgtype.Int4 `json:"total_purchases"`
	Address        pgtype.Text `json:"address"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (CreateClientRow, error) {
	row := q.db.QueryRow(ctx, createClient,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.IsBussiness,
		arg.Address,
		arg.TotalPurchases,
	)
	var i CreateClientRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.IsBussiness,
		&i.TotalPurchases,
		&i.Address,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM
    clients
WHERE
    id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteClient, id)
	return err
}

const getClientByID = `-- name: GetClientByID :one
SELECT
    id,
    name,
    email,
    phone,
    is_bussiness,
    total_purchases,
    address,
    last_purchase
    created_at,
    updated_at
FROM
    clients
WHERE
    id = $1
`

type GetClientByIDRow struct {
	ID             pgtype.UUID      `json:"id"`
	Name           string           `json:"name"`
	Email          pgtype.Text      `json:"email"`
	Phone          pgtype.Text      `json:"phone"`
	IsBussiness    pgtype.Bool      `json:"is_bussiness"`
	TotalPurchases pgtype.Int4      `json:"total_purchases"`
	Address        pgtype.Text      `json:"address"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetClientByID(ctx context.Context, id pgtype.UUID) (GetClientByIDRow, error) {
	row := q.db.QueryRow(ctx, getClientByID, id)
	var i GetClientByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.IsBussiness,
		&i.TotalPurchases,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClients = `-- name: GetClients :many
SELECT
    id,
    name,
    email,
    phone,
    is_bussiness,
    total_purchases,
    address,
    created_at,
    updated_at
FROM
    clients
`

type GetClientsRow struct {
	ID             pgtype.UUID      `json:"id"`
	Name           string           `json:"name"`
	Email          pgtype.Text      `json:"email"`
	Phone          pgtype.Text      `json:"phone"`
	IsBussiness    pgtype.Bool      `json:"is_bussiness"`
	TotalPurchases pgtype.Int4      `json:"total_purchases"`
	Address        pgtype.Text      `json:"address"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetClients(ctx context.Context) ([]GetClientsRow, error) {
	rows, err := q.db.Query(ctx, getClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClientsRow
	for rows.Next() {
		var i GetClientsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.IsBussiness,
			&i.TotalPurchases,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :exec
UPDATE
    clients
SET
    name = $1,
    email = $2,
    phone = $3,
    is_bussiness = $4,
    last_purchase = $5,
    address = $6,
    total_purchases = $7,
    updated_at = NOW() 
WHERE
    id = $8
`

type UpdateClientParams struct {
	Name           string           `json:"name"`
	Email          pgtype.Text      `json:"email"`
	Phone          pgtype.Text      `json:"phone"`
	IsBussiness    pgtype.Bool      `json:"is_bussiness"`
	LastPurchase   pgtype.Timestamp `json:"last_purchase"`
	Address        pgtype.Text      `json:"address"`
	TotalPurchases pgtype.Int4      `json:"total_purchases"`
	ID             pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.Exec(ctx, updateClient,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.IsBussiness,
		arg.LastPurchase,
		arg.Address,
		arg.TotalPurchases,
		arg.ID,
	)
	return err
}
