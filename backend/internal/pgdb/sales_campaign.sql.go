// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sales_campaign.sql

package pgdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addLeadToSalesCampaign = `-- name: AddLeadToSalesCampaign :exec
INSERT INTO
    sales_campaign_leads (campaign_id, lead_id, owner_id)
VALUES
    (
        $1,
        $2,
        $3
    )
`

type AddLeadToSalesCampaignParams struct {
	CampaignID pgtype.Int4 `json:"campaign_id"`
	LeadID     pgtype.Int4 `json:"lead_id"`
	OwnerID    int32       `json:"owner_id"`
}

func (q *Queries) AddLeadToSalesCampaign(ctx context.Context, arg AddLeadToSalesCampaignParams) error {
	_, err := q.db.Exec(ctx, addLeadToSalesCampaign, arg.CampaignID, arg.LeadID, arg.OwnerID)
	return err
}

const createSalesCampaign = `-- name: CreateSalesCampaign :one
INSERT INTO
    sales_campaigns (name, type, script_id, owner_id)
VALUES
    (
        $1,
        $2,
        $3,
        $4
    ) RETURNING id,
    type,
    name,
    script_id
`

type CreateSalesCampaignParams struct {
	Name     string      `json:"name"`
	Type     string      `json:"type"`
	ScriptID pgtype.Int4 `json:"script_id"`
	OwnerID  int32       `json:"owner_id"`
}

type CreateSalesCampaignRow struct {
	ID       int32       `json:"id"`
	Type     string      `json:"type"`
	Name     string      `json:"name"`
	ScriptID pgtype.Int4 `json:"script_id"`
}

func (q *Queries) CreateSalesCampaign(ctx context.Context, arg CreateSalesCampaignParams) (CreateSalesCampaignRow, error) {
	row := q.db.QueryRow(ctx, createSalesCampaign,
		arg.Name,
		arg.Type,
		arg.ScriptID,
		arg.OwnerID,
	)
	var i CreateSalesCampaignRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.ScriptID,
	)
	return i, err
}

const createSalesScript = `-- name: CreateSalesScript :one
INSERT INTO
    sales_scripts (title, type, subject, body, owner_id)
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5
    ) RETURNING id,
    title,
    type,
    subject,
    body
`

type CreateSalesScriptParams struct {
	Title   string      `json:"title"`
	Type    string      `json:"type"`
	Subject pgtype.Text `json:"subject"`
	Body    pgtype.Text `json:"body"`
	OwnerID int32       `json:"owner_id"`
}

type CreateSalesScriptRow struct {
	ID      int32       `json:"id"`
	Title   string      `json:"title"`
	Type    string      `json:"type"`
	Subject pgtype.Text `json:"subject"`
	Body    pgtype.Text `json:"body"`
}

func (q *Queries) CreateSalesScript(ctx context.Context, arg CreateSalesScriptParams) (CreateSalesScriptRow, error) {
	row := q.db.QueryRow(ctx, createSalesScript,
		arg.Title,
		arg.Type,
		arg.Subject,
		arg.Body,
		arg.OwnerID,
	)
	var i CreateSalesScriptRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Type,
		&i.Subject,
		&i.Body,
	)
	return i, err
}

const getLeadsByCampaign = `-- name: GetLeadsByCampaign :many
SELECT leads.email, leads.first_name, leads.last_name, leads.phone
FROM leads
JOIN sales_campaign_leads ON leads.id = sales_campaign_leads.lead_id
WHERE sales_campaign_leads.campaign_id = $1
  AND sales_campaign_leads.owner_id = $2
`

type GetLeadsByCampaignParams struct {
	CampaignID pgtype.Int4 `json:"campaign_id"`
	OwnerID    int32       `json:"owner_id"`
}

type GetLeadsByCampaignRow struct {
	Email     pgtype.Text `json:"email"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	Phone     pgtype.Text `json:"phone"`
}

func (q *Queries) GetLeadsByCampaign(ctx context.Context, arg GetLeadsByCampaignParams) ([]GetLeadsByCampaignRow, error) {
	rows, err := q.db.Query(ctx, getLeadsByCampaign, arg.CampaignID, arg.OwnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeadsByCampaignRow
	for rows.Next() {
		var i GetLeadsByCampaignRow
		if err := rows.Scan(
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalesCampaigns = `-- name: GetSalesCampaigns :many
SELECT id,
       name,
       type,
       script_id
FROM sales_campaigns
WHERE owner_id = $1
ORDER BY name
`

type GetSalesCampaignsRow struct {
	ID       int32       `json:"id"`
	Name     string      `json:"name"`
	Type     string      `json:"type"`
	ScriptID pgtype.Int4 `json:"script_id"`
}

func (q *Queries) GetSalesCampaigns(ctx context.Context, ownerID int32) ([]GetSalesCampaignsRow, error) {
	rows, err := q.db.Query(ctx, getSalesCampaigns, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSalesCampaignsRow
	for rows.Next() {
		var i GetSalesCampaignsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.ScriptID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalesScriptByID = `-- name: GetSalesScriptByID :one
SELECT id,
       title,
       type,
       subject,
       body
FROM sales_scripts
WHERE id = $1
  AND owner_id = $2
`

type GetSalesScriptByIDParams struct {
	ID      int32 `json:"id"`
	OwnerID int32 `json:"owner_id"`
}

type GetSalesScriptByIDRow struct {
	ID      int32       `json:"id"`
	Title   string      `json:"title"`
	Type    string      `json:"type"`
	Subject pgtype.Text `json:"subject"`
	Body    pgtype.Text `json:"body"`
}

func (q *Queries) GetSalesScriptByID(ctx context.Context, arg GetSalesScriptByIDParams) (GetSalesScriptByIDRow, error) {
	row := q.db.QueryRow(ctx, getSalesScriptByID, arg.ID, arg.OwnerID)
	var i GetSalesScriptByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Type,
		&i.Subject,
		&i.Body,
	)
	return i, err
}

const getSalesScripts = `-- name: GetSalesScripts :many
SELECT id,
       title,
       type,
       subject,
       body
FROM sales_scripts
WHERE owner_id = $1
ORDER BY title
`

type GetSalesScriptsRow struct {
	ID      int32       `json:"id"`
	Title   string      `json:"title"`
	Type    string      `json:"type"`
	Subject pgtype.Text `json:"subject"`
	Body    pgtype.Text `json:"body"`
}

func (q *Queries) GetSalesScripts(ctx context.Context, ownerID int32) ([]GetSalesScriptsRow, error) {
	rows, err := q.db.Query(ctx, getSalesScripts, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSalesScriptsRow
	for rows.Next() {
		var i GetSalesScriptsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Type,
			&i.Subject,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalesScriptsByType = `-- name: GetSalesScriptsByType :many
SELECT id,
       title,
       type,
       subject,
       body
FROM sales_scripts
WHERE owner_id = $1
  AND type = $2
ORDER BY title
`

type GetSalesScriptsByTypeParams struct {
	OwnerID int32  `json:"owner_id"`
	Type    string `json:"type"`
}

type GetSalesScriptsByTypeRow struct {
	ID      int32       `json:"id"`
	Title   string      `json:"title"`
	Type    string      `json:"type"`
	Subject pgtype.Text `json:"subject"`
	Body    pgtype.Text `json:"body"`
}

func (q *Queries) GetSalesScriptsByType(ctx context.Context, arg GetSalesScriptsByTypeParams) ([]GetSalesScriptsByTypeRow, error) {
	rows, err := q.db.Query(ctx, getSalesScriptsByType, arg.OwnerID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSalesScriptsByTypeRow
	for rows.Next() {
		var i GetSalesScriptsByTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Type,
			&i.Subject,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
