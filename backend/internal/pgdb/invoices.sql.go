// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: invoices.sql

package pgdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices
    (client_id, total_amount, date_of_issue, due_date, description)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING id,
    client_id,
    total_amount,
    date_of_issue,
    due_date,
    description,
    created_at,
    updated_at
`

type CreateInvoiceParams struct {
	ClientID    pgtype.UUID      `json:"client_id"`
	TotalAmount pgtype.Int4      `json:"total_amount"`
	DateOfIssue pgtype.Timestamp `json:"date_of_issue"`
	DueDate     pgtype.Timestamp `json:"due_date"`
	Description pgtype.Text      `json:"description"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoices, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.ClientID,
		arg.TotalAmount,
		arg.DateOfIssue,
		arg.DueDate,
		arg.Description,
	)
	var i Invoices
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.TotalAmount,
		&i.DateOfIssue,
		&i.DueDate,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM
    invoices
WHERE
    id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteInvoice, id)
	return err
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT 
    id,
    client_id,
    total_amount,
    date_of_issue,
    due_date,
    description,
    created_at,
    updated_at
FROM
    invoices
WHERE
    id = $1
`

func (q *Queries) GetInvoiceByID(ctx context.Context, id pgtype.UUID) (Invoices, error) {
	row := q.db.QueryRow(ctx, getInvoiceByID, id)
	var i Invoices
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.TotalAmount,
		&i.DateOfIssue,
		&i.DueDate,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInvoices = `-- name: GetInvoices :many
SELECT
    id,
    client_id,
    total_amount,
    date_of_issue,
    due_date,
    description,
    created_at,
    updated_at
FROM
    invoices
`

func (q *Queries) GetInvoices(ctx context.Context) ([]Invoices, error) {
	rows, err := q.db.Query(ctx, getInvoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoices
	for rows.Next() {
		var i Invoices
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.TotalAmount,
			&i.DateOfIssue,
			&i.DueDate,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoice = `-- name: UpdateInvoice :exec
UPDATE
    invoices
SET
    client_id = $1,
    total_amount = $2,
    date_of_issue = $3,
    due_date = $4,
    description = $5,
    updated_at = NOW()
WHERE
    id = $6
`

type UpdateInvoiceParams struct {
	ClientID    pgtype.UUID      `json:"client_id"`
	TotalAmount pgtype.Int4      `json:"total_amount"`
	DateOfIssue pgtype.Timestamp `json:"date_of_issue"`
	DueDate     pgtype.Timestamp `json:"due_date"`
	Description pgtype.Text      `json:"description"`
	ID          pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) error {
	_, err := q.db.Exec(ctx, updateInvoice,
		arg.ClientID,
		arg.TotalAmount,
		arg.DateOfIssue,
		arg.DueDate,
		arg.Description,
		arg.ID,
	)
	return err
}
